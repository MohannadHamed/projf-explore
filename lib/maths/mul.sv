// Generated by CIRCT firtool-1.62.0
module mul(
  input         clk,
                rst,
                start,
  output        busy,
                done,
                valid,
                ovf,
  input  [24:0] a,
                b,
  output [24:0] val
);

  reg         sigDiff;
  reg  [24:0] a1;
  reg  [24:0] b1;
  reg  [24:0] prodT;
  reg  [49:0] prod;
  reg  [20:0] rbits;
  reg         round;
  reg         even;
  reg  [1:0]  state;
  wire        _GEN = state == 2'h0;
  wire        _GEN_0 = state == 2'h1;
  wire        _GEN_1 = state == 2'h2;
  wire        _GEN_2 = _GEN | _GEN_0 | _GEN_1;
  wire        _GEN_3 = sigDiff == prodT[24] & (prod[49:46] == 4'h0 | prod[49:46] == 4'h1);
  always @(posedge clk) begin
    automatic logic _GEN_4;
    automatic logic _GEN_5;
    _GEN_4 = _GEN & start;
    _GEN_5 = _GEN | _GEN_0 | ~_GEN_1;
    if (rst) begin
      sigDiff <= 1'h0;
      round <= 1'h0;
      even <= 1'h0;
      state <= 2'h0;
    end
    else begin
      automatic logic [3:0][1:0] _GEN_6 =
        {{2'h0}, {2'h3}, {2'h2}, {start ? 2'h1 : state}};
      if (_GEN_4)
        sigDiff <= a[24] ^ b[24];
      if (_GEN_5) begin
      end
      else begin
        round <= prod[21];
        even <= ~(prod[22]);
      end
      state <= _GEN_6[state];
    end
    if (_GEN_4) begin
      a1 <= a;
      b1 <= b;
    end
    if (_GEN_5) begin
    end
    else
      prodT <= prod[45:21];
    if (_GEN | ~_GEN_0) begin
    end
    else
      prod <= {{25{a1[24]}}, a1} * {{25{b1[24]}}, b1};
    if (_GEN_5) begin
    end
    else
      rbits <= prod[20:0];
  end // always @(posedge)
  assign busy = _GEN & start;
  assign done = ~_GEN_2 & (&state);
  assign valid = ~_GEN_2 & (&state) & _GEN_3;
  assign ovf = ~_GEN_2 & (&state) & ~_GEN_3;
  assign val =
    _GEN_2 | ~(&state)
      ? 25'h0
      : round & ~(even & rbits == 21'h100000) ? prodT + 25'h1 : prodT;
endmodule

